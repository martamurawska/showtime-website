<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GeZuMi on IMI Showtime</title>
    <link>https://martamurawska.github.io/showtime-website/ss21/master/m1-gezumi/</link>
    <description>Recent content in GeZuMi on IMI Showtime</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language><atom:link href="https://martamurawska.github.io/showtime-website/ss21/master/m1-gezumi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Features</title>
      <link>https://martamurawska.github.io/showtime-website/ss21/master/m1-gezumi/features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martamurawska.github.io/showtime-website/ss21/master/m1-gezumi/features/</guid>
      <description>Start and Client Screen Start Screen To help players understand which of the &amp;lsquo;player-dots&amp;rsquo; they represent on the game screen and to enable hosts to consciously build teams, all users are asked to provide a player name on the start screen of the app (see first screen below).
Join-Requests After choosing a player name and clicking &amp;lsquo;Join Game&amp;rsquo; on the start screen, users can scan for existing games and request to join one.</description>
    </item>
    
    <item>
      <title>Process</title>
      <link>https://martamurawska.github.io/showtime-website/ss21/master/m1-gezumi/process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martamurawska.github.io/showtime-website/ss21/master/m1-gezumi/process/</guid>
      <description>Design Evolution At the beginning, all ideas were collected on a Miroboard from which the following mock-ups were then developed (see image below). Players would land on a starting screen where they could select whether they wanted to start a new game or join an existing one. Two variants for the game-setup screen were mocked (screen 2 and 3). One would allow the host to manually select the players for a game, while the other alternative would randomly create teams based on all available, current app users.</description>
    </item>
    
    <item>
      <title>Tech Stack</title>
      <link>https://martamurawska.github.io/showtime-website/ss21/master/m1-gezumi/tech-stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martamurawska.github.io/showtime-website/ss21/master/m1-gezumi/tech-stack/</guid>
      <description>Tech Stack Android &amp;amp; Kotlin Android is an open-source, Linux-based OS, mainly developed by Google. It&amp;rsquo;s well-documented and, next to iOS, the most common operating system for mobile devices. The team decided to develop an Android App, as some existing experience could be extended and most members were Android-device users.
Kotlin is a fairly modern programming language inspired by Java. It is clean, carries fewer formalities and is therefore shorter than Java.</description>
    </item>
    
    <item>
      <title>Future</title>
      <link>https://martamurawska.github.io/showtime-website/ss21/master/m1-gezumi/future/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martamurawska.github.io/showtime-website/ss21/master/m1-gezumi/future/</guid>
      <description>What&amp;#39;s next? GeZuMi can be seen as a Proof of Concept. The goal was to determine whether distances could be reliably calculated and then further processed with Bluetooth technologies. Overall, there are technical limitations to the Bluetooth concept and it is not perfect for determining real time locations.
To reliably work with the transmitted data, the filtering of the RSSI values would have to become more precise so that the unexpected spikes and drops of the values could be balanced out.</description>
    </item>
    
  </channel>
</rss>
