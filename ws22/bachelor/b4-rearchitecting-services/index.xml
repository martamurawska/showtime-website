<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rearchitecting Services with AWS Lambda Functions on IMI Showtime</title>
    <link>https://martamurawska.github.io/showtime-website/ws22/bachelor/b4-rearchitecting-services/</link>
    <description>Recent content in Rearchitecting Services with AWS Lambda Functions on IMI Showtime</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language><atom:link href="https://martamurawska.github.io/showtime-website/ws22/bachelor/b4-rearchitecting-services/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Features</title>
      <link>https://martamurawska.github.io/showtime-website/ws22/bachelor/b4-rearchitecting-services/features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martamurawska.github.io/showtime-website/ws22/bachelor/b4-rearchitecting-services/features/</guid>
      <description>Features There are two parts of the template:
the infrastructure part (tells what resources to deploy to AWS) the business logic part (the code itself that runs in the Lambda) The AWS setup is generic: the API Gateway receives traffic (we get some data about favorite colors, snacks and movies with different data types in JSON format) and then it is passed to the Lambda function. It doesn&amp;rsquo;t matter if the incoming data is valid or not, it will be saved to the S3 bucket, but if the validation does succeed, it will also be sent to the SQS Queue from where it can be used for various internal idealo needs.</description>
    </item>
    
    <item>
      <title>Process</title>
      <link>https://martamurawska.github.io/showtime-website/ws22/bachelor/b4-rearchitecting-services/process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martamurawska.github.io/showtime-website/ws22/bachelor/b4-rearchitecting-services/process/</guid>
      <description>Process The initial idea was to build a payload modification processing based on the CDK template, which would then go into production and could prove to be a cheaper solution than the server solution currently used at idealo. The Lambda function should have done some payload verification and possibly signature verification (related to cryptography).
There were some reasons why it did not happen:
idealo decided to discontinue the Direktkauf feature, the scope was changed, so it was not really applicable anymore.</description>
    </item>
    
    <item>
      <title>Tech Stack</title>
      <link>https://martamurawska.github.io/showtime-website/ws22/bachelor/b4-rearchitecting-services/techstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martamurawska.github.io/showtime-website/ws22/bachelor/b4-rearchitecting-services/techstack/</guid>
      <description>Tech Stack Project management We used Notion, Miro and Microsoft Teams for project management and communication.
Development TypeScript was used as the programming language, executed on Node.js We also used the AWS Cloud Development Kit (AWS CDK) as a software development framework to define the cloud infrastructure as code and deploy it through AWS CloudFormation. We used GitHub for code hosting and code version control, where we also set up GitHub Actions to automate building, testing, and deployment to AWS.</description>
    </item>
    
  </channel>
</rss>
