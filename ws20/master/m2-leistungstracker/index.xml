<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Athletimize on IMI Showtime</title>
    <link>https://martamurawska.github.io/showtime-website/ws20/master/m2-leistungstracker/</link>
    <description>Recent content in Athletimize on IMI Showtime</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language><atom:link href="https://martamurawska.github.io/showtime-website/ws20/master/m2-leistungstracker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Features</title>
      <link>https://martamurawska.github.io/showtime-website/ws20/master/m2-leistungstracker/features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martamurawska.github.io/showtime-website/ws20/master/m2-leistungstracker/features/</guid>
      <description>Athletimize facilitates training planning and management by including holistic data. It provides the following features to athletic teams and organizations:
Assessments We have two types of assessments:
Daily assessments are answered everyday in the morning. The questions range from the athlete&amp;rsquo;s state of mind to their body condition Session assessments are answered right after a training or match has taken place. The athletes give their personal view about the intensity of the session and provide the time that they were involved.</description>
    </item>
    
    <item>
      <title>Process</title>
      <link>https://martamurawska.github.io/showtime-website/ws20/master/m2-leistungstracker/process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martamurawska.github.io/showtime-website/ws20/master/m2-leistungstracker/process/</guid>
      <description>The development process Throughout the duration of the project, we worked in a &amp;lsquo;Scrum-ban&amp;rsquo; mode. While we did plan our weekly sprints, we also worked very much on a &amp;lsquo;what-is-needed&amp;rsquo; basis. As we all had very different schedules, we didn&amp;rsquo;t have Dailies. Once a week we had a meeting that was Review and Sprint Planning in one. All code was located in a shared Gitlab repository, where we checked in our code whenever a ticket was solved.</description>
    </item>
    
    <item>
      <title>Tech Stack</title>
      <link>https://martamurawska.github.io/showtime-website/ws20/master/m2-leistungstracker/tech-stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martamurawska.github.io/showtime-website/ws20/master/m2-leistungstracker/tech-stack/</guid>
      <description>Tech Stack React &amp;amp; Typescript For our Frontend we decided to use ReactJS with TypeScript. This gave us the advantage of having a well-documented library with a plethora of available resources. React is relatively easy to learn and it allowed us to have a modular structure where we could build various reusable components. To improve and ensure code-quality, we set up very strict linting and formatting rules. We used Bulma for essential styling.</description>
    </item>
    
    <item>
      <title>Future</title>
      <link>https://martamurawska.github.io/showtime-website/ws20/master/m2-leistungstracker/future/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://martamurawska.github.io/showtime-website/ws20/master/m2-leistungstracker/future/</guid>
      <description>We focused on building a technically stable and well-architected project that could and will be the foundation for an application that will be used by athletic corporations. Our architecture and tech stack are built so that new features can easily be added.
Future features Advanced session planning (attendance, sickness, etc.) Team communication (chats, comments) Medical information &amp;amp; treatments </description>
    </item>
    
  </channel>
</rss>
